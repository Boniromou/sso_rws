<!-- In the callback, you would hide the gSignInWrapper element on a
  successful sign in -->
<div id="gSignInWrapper">
  <span class="label">Sign in with:</span>
  <div id="customBtn" class="customGPlusSignIn">
    <span class="icon"></span>
    <span class="buttonText">Google</span>
  </div>
</div>
<div><span id="error_msg"></span></div>
<%= hidden_field_tag 'app_name', @app_name %>

<script type="text/javascript">
  $(document).ready(function() {
    var googleUser = {};
    var startApp = function() {
      gapi.load('client:auth2', function(){
        // Retrieve the singleton for the GoogleAuth library and set up the client.
        var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/admin/directory_v1/rest"];
        var SCOPES = 'https://www.googleapis.com/auth/admin.directory.user.readonly  https://www.googleapis.com/auth/admin.directory.group.readonly';
        gapi.client.init({
          apiKey: 'AIzaSyATZtL0Lbh_E5XR8_pmlpnEH1J1o7lg_5Q',
          clientId: '<%= @g_clien_id %>',
          discoveryDocs: DISCOVERY_DOCS,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
        }, function(error) {
          console.log(JSON.stringify(error, null, 2));
        });
      });
    };

    $("#customBtn").click(function () {
      gapi.auth2.getAuthInstance().signIn();
    });

    function updateSigninStatus(isSignedIn) {
      if (isSignedIn) {
        console.log('sign in true')
        listUsers();
      }
    }

    function listUsers() {
      gapi.client.directory.groups.list({
        'userKey': 'gwtst.user01@gwtst.net'
      }).then(function(response) {
        var groups = response.result.groups;
        console.log(groups)
      });

      // gapi.client.directory.users.list({
      //   'customer': 'my_customer',
      //   'maxResults': 10,
      //   'orderBy': 'email'
      // }).then(function(response) {
      //   var users = response.result.users;
      //   console.log(users)
      // });
    }

    // function signOutGoogle(profile, id_token) {
    //   // var revokeUrl = 'https://accounts.google.com/o/oauth2/revoke?token=' + gapi.auth.getToken().access_token;
    //   console.log(profile)
    //   console.log(profile.cgroup)
    //   console.log('sign out...............')
    //   var auth2 = gapi.auth2.getAuthInstance();
    //   auth2.signOut().then(function () {
    //     console.log('User signed out.');
    //   });
    //   // document.location.href = "https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout?continue=http://localhost:3000/home"
    //   getGroup(profile)
    //   // auth2.disconnect();
    //   console.log('0000000000000000')
    //   loginSSO(profile, id_token);
    // }

    // function getGroup(profile) {
    //   var group = GroupsApp.getGroupByEmail(profile.getEmail());
    //   console.log(group)
    //   var users = group.getUsers();
    //   console.log('These are the group owners:');
    //   for (var i = 0; i < users.length; i++) {
    //     var user = users[i];
    //     if (group.getRole(user.getEmail()) == GroupsApp.Role.OWNER) {
    //       console.log(user.getEmail());
    //     }
    //   }
      // var request = gapi.client.request({
      //   'method': 'GET',
      //   'path': '/drive/v3/about',
      //   'params': {'fields': 'user'}
      // });
      // // Execute the API request.
      // request.execute(function(response) {
      //   console.log(response);
      // });
    // }

    function loginSSO(profile, id_token) {
      $.ajax({
        url: "/gapi/login",
        type: 'POST',
        dataType: 'json',
        data: {username: profile.getEmail(), app_name: '<%= @app_name %>', id_token: id_token}
      }).done(function(rst) {
        console.log(rst)
        if(rst.error_code == 'OK'){
          window.location.href = rst.callback_url;

        }else{
          $('#error_msg').html(rst.error_msg)
        }
      });
    }

    startApp();
  });
</script>

<style type="text/css">
  #customBtn {
    display: inline-block;
    background: white;
    color: #444;
    width: 190px;
    border-radius: 5px;
    border: thin solid #888;
    box-shadow: 1px 1px 1px grey;
    white-space: nowrap;
  }
  #customBtn:hover {
    cursor: pointer;
  }
  span.label {
    font-family: serif;
    font-weight: normal;
  }
  span.icon {
    background-image: url('../../assets/images/rails.png') transparent 5px 50% no-repeat;
    display: inline-block;
    vertical-align: middle;
    width: 42px;
    height: 42px;
  }
  span.buttonText {
    display: inline-block;
    vertical-align: middle;
    padding-left: 42px;
    padding-right: 42px;
    font-size: 14px;
    font-weight: bold;
    /* Use the Roboto font that is loaded in the <head> */
    font-family: 'Roboto', sans-serif;
  }
</style>
